OCT - 20: 

https://fortbridge.co.uk/research/idor-exploitation-via-hpp-api-hacking-case-study/ 
KEYPOINT: 
1. IDOR VIA HTTP PARAMETER POLLUTION
2. There was not SQLI or XSS so the tester moved towards IDOR 

ACTUAL STORY: 
1. The tester already first test for serveral other bugs like xss,sqli they didnot found it.
2. They initially also test for an IDOR by manipulating IDs they were not able to found that too ----> IDs manipulate garara idor khojyo but vetana suru tira
3. At final the tester found a critical bug IDOR  exploting via HTTP Parameter Pollution --> last ma chai idor vetyo through HPP 
4.  Bypassing ACLs – IDOR exploitation via HPP:
     4.1 Tried with maniputaing with IDs no luck
     4.2 Now tried with HPP --> this simply means adding another parameter as the same name with the existing parameter, in this case the parameter was customer id.
     4.3 The name shoudl be the exact, so the testers look the JSON response and found out it was :"CustomerId" key.
     4.4 Now they add a new parameter called: CustomerId: <customer_ids>, with a GET request
          4.4.1 The request look like: GET /api/a/b/c/random/stuff/v1/23923017/again/random/stuff/CustomerId=23923017 --> this leaks the PII data throgh HPP   
5. So till now the testers are able to still the PII of another customer by simply adding a GET parameter with the name customerid and a random integer value.
6. This was the systematic issue that affect the API from idor via hpp.
7. Again the tester were able to exploited the /addresses/<<customerid>> endpoint to leak all the registered addresses of any customer.
8. Now the developers fixed it and the testers were able to bypass it again: 
   8.1 Bypassing the fix: 
      8.1.1 Still there are many parameter that were vulnerable to previous exploit
      8.1.2 One simple way to bypass it is to: Change parameter from GET to POST  --> this is with some limited info only no PII leak hai 
9. So the logic and main issue is: if there is no idor with simple manipulating ids go with the http parameter pollution as well.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     
OCT - 21: 

https://freedium.cfd/https://blog.bugbountyhunter.xyz/idor-on-hackerone-embedded-submission-form-9e59c6f044b3

REWARD --> $2500

KEYPOINT: 
1. It's IDOR ON HACKERONE EMBEDDED SUBMISSION FORM
2. FOUND AN IDOR THROUGH GRAPHQL API

LET'S GET INTO ACTION: 
1. At first bro, found a IDOR In hackerone embedded submission form, to access sensitive info hai.
2. The following graphql API was used: 
    2.1 POST /graphql?embedded_submission_form_uuid=<UUID> HTTP/2 
        --
        --
        --
     2.2 Now if the UUID is still alive and this shows the information about the program embedded submission form.   --> this report was closed at duplicate N/A
3. Now the real exploit story, intresting one: 
     3.1 Bro found the UUID which is already dead or inactive ---> pailai tyo uuid net ma publish vaye ne the company make it dead not useable hai
     3.2 And using that UUDI, if we check the user interface it will show the program is not live --> which is good as expected beacuse it's the dead UUID
     3.3 So intresting thing here is with the dead UUID if we  try to query the information using the same GraphQL then it will gives us all the info about the program where that
         UUID is belongs to:   ---> Great found different idor here if we have that UUID
4. Now, how bro is able to find that UUID???
    4.1 From an recon process like:
         4.1.1 echo 'https://hackerone.com/' | waybackurls > lists.txt
         4.1.2  cat lists.txt | grep "embedded_submissions" > results.txt
         4.1.3 cat results.txt
         4.1.4 Here, in the results.txt there is lots of embedded submission id from there we can collect the id and use it on the vulnerable graphql to get the
                sensitive info about the program. 
5. Logic and must to do: 
   5.1 Do proper recon always and don't settle for less read more test more


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

OCT - 22 

https://medium.com/@bxrowski0x/bypassing-an-idor-a-couple-of-times-4d67555a1545

ABOUT: Bro, bypassed a IDOR twice which leaks customer PII data.

LET'S START THE STORY: 
1. Bro,went to the profile it runs of /profile/setting --> and open the burp he saws the req goes through: /api/v4/users/2265 --> look numeric id you can play with it
2. Bro tried a few normal tricks here to get idor but still no success --> read that tries in his writeups what he tries vanne 
3. Played with request methods: 
    3.1 Change the request to POST [show a 404]
    3.2 Change the request to PUT [shows 500 internal server error] --> something happens here needed to be checked
4. Now changing the request method to PUT and adding a {_method= PATCH} in the body ---> this gives a 200 res, with user sensitive info  --> great  
      --> but sometimes 200 sometimes 500 
   4.1 This shows 200 OK sometimes and sometimes 500 internal server error this is so weird
   4.2 This much was the not much info: so bro dig more and found a parameter called {include} that takes some value firstname/lastname/email when we use it the response.
5. Now the request would be look like: 
    PUT /api/v4/users/1?include=firstname%2Clastname%2CdisplayName%2Cemail%2Cimage%2CisMe HTTP/2
    --
    --
    _method = PATCH 
    5.1 OK, it gives 200 OK with the users sensitive info hai
    5.2 Nice till now, but at the triager side it was not reproduce --> don't know why they were getting 401 unauthorized
6. So this time what bro does is: keeping the request as same but without body {_method = PATCH } --> this gives an info leak
   6.1 PUT /api/v4/users/1?include=firstname%2Clastname%2CdisplayName%2Cemail%2Cimage%2CisMe HTTP/2 --> this  req without whole body --> this does works

7. Another story of bypassing the bypass:
   7.1 Bro changed the profile first name: and the request looks like: 
      7.1.1 PUT /api/v4/user/ HTTP/2
            --
            id=id_here&firstname=first_name --> now here changing id to another id {403} & using hpp also 403 like: id=4&id=1 {403]
    7.2 Ok, now what the request takes is: it takes both bodies and path query too like: ?something 
        7.2.1 PUT /api/v4/user/?include=email
              --
              --
              id=22652&firstname=testaqq --> this was giving now 200OK hai
8. Now what bro did to achieve idor is intresting: 
     8.1 In query parameter own details in body paramter victim id --> this gives in response victim sensitive info
        8.1.1 PUT /api/v4/user/22652?include=firstname%2Clastname%2CdisplayName%2Cemail%2CisMe HTTP/2
              --
              id=victim_id --> ok this leaks everything about victim user PII info.   --> bro need to remove firstname cause it was giving 403 so giving only id.
9. Things to understand and logic: 
    9.1 Try diff request methods
    9.2 Try with method override too like: _method = PATCH in body
    9.3 Check if the request is accepting string query like: ? or body query --> check for this both 
    9.4 Just stay curious and consistent

-----------------------------------------------------------------------------------------------------------------------------------------------------------

OCT - 22      

https://anasbetis023.medium.com/how-one-bug-scored-me-double-rewards-355b8d02cdbf

REWARD: $100 + $200 = $300

ABOUT: Bro do good use of shodan dorking, google dorking to find endpoint target and got a idor 

LET'S START THE STORY: 
1. The fact bro didnot use any subdomain finder tool because: anything.website.com --> always redirecting to website.com/login
2. So, he use a shodan dork i.e -->  ssl:redacted.com\
   2.1 From this shodan dork bro found an ip going to an subdomain {z2007.website.com} --> intresting it seems like an some old forgotten subdomain
3. The main website i.e website.com is about video streaming and screensharing, after bit of researching he found a test page at: 
     3.1 "z2007.example.com/agv/sampleAgent.html” --> ok this is a test page hai
4. Ok after viewing the: z2007.redacted.com/agv/sampleAgent.html and seeing it at the burp: 
    4.1 It's taking  a PUT request with /offer endpoint with some queries on bodies like parameter videowidth, videoheight, groupid
        4.1.1 When changing the groupid it's giving a bit of different response then other i.e ; you give the groupid, and the server responds with the group name.
5. So changing the groupid param, the server responds a group name --> bro reported this as “Information Disclosure [Group Name Manipulation],” and got a $100 reward
6. Now bro didnot stops here to...he tries to found as many as subdomain and give the PUT /offer request --> but badluck didnot get anything success 
7. Ok, again bro got an subdomain called: video.example.com which was taking the PUT request --> the server accept groupid --> intresting also support isAnonymous and new 
    param called personid --> I can sense the bug here 
8.  Now access this: https://video.example.net/offer?groupid=21582&isAnonymous=true&personid=1990018
    8.1 Intercept the request and change the request method to PUT and boom the sensitive infos are in there. --> bro got $200 for this
9. Logic and motivation: 
    9.1 If the subdomain didnot found always do recon like google dork and shodan dork and github dork
    9.2 Look every request carefully kun parameter lai manipulate garda k huncha hatauda k huncha everything and make a note of it
    9.3 Gold info: Look with changing the request method: like PUT works here 





























